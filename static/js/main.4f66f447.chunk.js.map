{"version":3,"sources":["serviceWorker.ts","components/DiceIcon/index.tsx","components/RulesPage/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","DiceIcon","name","amount","rule","url","RuleContainer","Array","fill","map","_","index","src","alt","style","marginRight","height","width","styled","div","RulesPage","Background","Overlay","Flex","color","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oJCfS,SAASC,EAAT,GAQX,IAPFC,EAOC,EAPDA,KACAC,EAMC,EANDA,OACAC,EAKC,EALDA,KAMMC,EAAM,oBAAsBH,EAElC,OACE,kBAACI,EAAD,KACGC,MAAMJ,GACJK,KAAK,GACLC,KAAI,SAACC,EAAQC,GAAT,OACH,yBACEC,IAAKP,EACLQ,IAAKX,EACLY,MAAO,CAAEC,YAAa,QACtBC,OAVG,GAWHC,MAXG,QAcT,2BAAIb,IAKV,IAAME,EAAgBY,IAAOC,IAAV,K,4cC5BJ,SAASC,IACtB,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,kBAACtB,EAAD,CAAUC,KAAK,eAAeC,OAAQ,EAAGC,KAAK,WAC9C,kBAACH,EAAD,CAAUC,KAAK,eAAeC,OAAQ,EAAGC,KAAK,wBAEhD,kBAACH,EAAD,CACEC,KAAK,iBACLC,OAAQ,EACRC,KAAK,mCAEP,kBAACH,EAAD,CAAUC,KAAK,gBAAgBC,OAAQ,EAAGC,KAAK,kBAC/C,kBAACH,EAAD,CACEC,KAAK,eACLC,OAAQ,EACRC,KAAK,yCAEP,kBAACH,EAAD,CACEC,KAAK,eACLC,OAAQ,EACRC,KAAK,qCAEP,kBAACH,EAAD,CACEC,KAAK,eACLC,OAAQ,EACRC,KAAK,+DAEP,kBAACmB,EAAD,KACE,kBAACtB,EAAD,CAAUC,KAAK,cAAcC,OAAQ,EAAGC,KAAK,gBAC7C,kBAACH,EAAD,CACEC,KAAK,cACLC,OAAQ,EACRC,KAAK,kCAIT,kBAACH,EAAD,CAAUC,KAAK,cAAcC,OAAQ,EAAGC,KAAK,aAC7C,kBAACH,EAAD,CAAUC,KAAK,cAAcC,OAAQ,EAAGC,KAAK,wBAC7C,6BACE,uBAAGU,MAAO,CAAEU,MAAO,UAAnB,wDASV,IAAMH,EAAaH,IAAOC,IAAV,KAQVG,EAAUJ,IAAOC,IAAV,KAKPI,EAAOL,IAAOC,IAAV,KC7DVM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACP,EAAD,OAEFQ,SAASC,eAAe,SHiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4f66f447.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nexport default function DiceIcon({\n  name,\n  amount,\n  rule,\n}: {\n  name: string;\n  amount: number;\n  rule: string;\n}) {\n  const url = \"/boardgames/dice/\" + name;\n  const size = 50;\n  return (\n    <RuleContainer>\n      {Array(amount)\n        .fill(0)\n        .map((_: any, index: any) => (\n          <img\n            src={url}\n            alt={name}\n            style={{ marginRight: \"10px\" }}\n            height={size}\n            width={size}\n          />\n        ))}\n      <p>{rule}</p>\n    </RuleContainer>\n  );\n}\n\nconst RuleContainer = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n  color: white;\n`;\n","import React from \"react\";\nimport DiceIcon from \"../DiceIcon\";\nimport styled from \"@emotion/styled\";\n\nexport default function RulesPage() {\n  return (\n    <Background>\n      <Overlay>\n        <Flex>\n          <DiceIcon name=\"01_heart.png\" amount={1} rule=\"Heal x\" />\n          <DiceIcon name=\"01_heart.png\" amount={3} rule=\"Take power-up card\" />\n        </Flex>\n        <DiceIcon\n          name=\"02_destroy.png\"\n          amount={1}\n          rule=\"Damage x to buildings or units\"\n        />\n        <DiceIcon name=\"03_energy.png\" amount={3} rule=\"Take x energy\" />\n        <DiceIcon\n          name=\"04_skull.png\"\n          amount={1}\n          rule=\"Units in your borough you damage you\"\n        />\n        <DiceIcon\n          name=\"04_skull.png\"\n          amount={2}\n          rule=\"+ other monsters in your borough\"\n        />\n        <DiceIcon\n          name=\"04_skull.png\"\n          amount={3}\n          rule=\"All units damage all monsters + take the Statue of Liberty\"\n        />\n        <Flex>\n          <DiceIcon name=\"05_claw.png\" amount={1} rule=\"Do x damage\" />\n          <DiceIcon\n            name=\"05_claw.png\"\n            amount={3}\n            rule=\"Berserk (if using expansion)\"\n          />\n        </Flex>\n\n        <DiceIcon name=\"06_star.png\" amount={1} rule=\"Nothing*\" />\n        <DiceIcon name=\"06_star.png\" amount={3} rule=\"Take Superstar card\" />\n        <div>\n          <p style={{ color: \"white\" }}>\n            *If you have the Superstar card; x victory points\n          </p>\n        </div>\n      </Overlay>\n    </Background>\n  );\n}\n\nconst Background = styled.div`\n  background: url(\"/boardgames/bg.png\");\n  background-position: center;\n  background-size: cover;\n  height: 100vh;\n  padding: 50px;\n`;\n\nconst Overlay = styled.div`\n  padding: 25px;\n  background: rgba(0, 0, 0, 0.8);\n`;\n\nconst Flex = styled.div`\n  display: flex;\n  div {\n    margin-right: 10px;\n  }\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport RulesPage from \"./components/RulesPage\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RulesPage />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}